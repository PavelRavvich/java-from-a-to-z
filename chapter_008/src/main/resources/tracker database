create database tracker;

--move to tracker data base.
\c tracker;

--create roles table. Privilege determines boolean flags.
create table if not exists privilege_roles(
    role char(10) PRIMARY KEY NOT NULL,
    data_view boolean NOT NULL,
    data_injection boolean NOT NULL
);

--create table with users.
create table if not exists users(
    user_id serial NOT NULL,
    role char(10) NOT NULL,
    username char(20) NOT NULL,
    password char(20) NOT NULL,
    email char(30),
    PRIMARY KEY (user_id),
    FOREIGN KEY (role) references privilege_roles(role)
);

--create table with tasks.
create table if not exists tasks(
    code_task serial NOT NULL,
    user_id integer NOT NULL,
    name_task char(50) NOT NULL,
    description text NOT NULL,
    state char(10) NOT NULL,
    category char(20) NOT NULL,
    create_time timestamp NOT NULL,
    PRIMARY KEY (code_task),
    FOREIGN KEY (user_id) references users(user_id)
);

--create table with comments.
create table if not exists comments(
    code_comment serial NOT NULL,
    code_task integer NOT NULL,
    body_comment text NOT NULL,
    create_time timestamp NOT NULL,
    user_id integer NOT NULL,
    PRIMARY KEY (code_comment),
    FOREIGN KEY (code_task) references tasks(code_task)
);

--create table with files of tasks paths.
create table if not exists files_tasks(
    file_id serial NOT NULL,
    file_task_path text NOT NULL,
    code_task integer NOT NULL,
    PRIMARY KEY (file_id),
    FOREIGN KEY (code_task) references tasks(code_task)
);

--create table with files of comments paths.
CREATE TABLE IF NOT EXISTS files_comments(
    file_id serial NOT NULL,
    code_comment integer NOT NULL,
    file_path text NOT NULL,
    PRIMARY KEY (file_id),
    FOREIGN KEY (code_comment) references comments(code_comment)
);